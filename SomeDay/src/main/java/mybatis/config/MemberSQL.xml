<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<resultMap type="memberModel" id="memberRes">
		<result property="idx" column="idx" />
		<result property="id" column="id" />
		<result property="nick" column="nick" />
		<result property="pass" column="pass" />
		<result property="name" column="name" />
		<result property="age" column="age" />
		<result property="gender" column="gender" />
		<result property="area" column="area" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="num1" column="num1" />
		<result property="num2" column="num2" />
		<result property="addr1" column="addr1" />
		<result property="addr2" column="addr2" />
		<result property="intro" column="intro" />
		<result property="score_avg" column="score_avg" />
		<result property="authority" column="authority" />
		<result property="times" column="times" />		
		<result property="bloodgroup" column="bloodgroup" />
		<result property="zipcode" column="zipcode" />
		<result property="file_orgname" column="file_orgname" />
		<result property="file_savname" column="file_savname" />	
	</resultMap>
	
	<!-- 우편번호리절트맵정의 -->
 	<resultMap type="zipcodeModel" id="zipcodeRes">
		<result property="zipcode" column="zipcode"/>
		<result property="area1" column="area1"/>
		<result property="area2" column="area2"/>
		<result property="area3" column="area3"/>
		<result property="area4" column="area4"/>
	</resultMap>
	
	<!-- 커플 가능한 수 -->
	<resultMap type="matchingModel" id="matchingRes">
		<result property="small" column="small"/>
	</resultMap>
	
	
	<!-- 공통으로 사용할 select 절 정의 -->
	<sql id="select-all-member">
		SELECT * FROM MEMBER
	</sql>
	
	<!-- 공통으로 사용할 where-idx 절 정의 -->
	<sql id="where-idx">
		WHERE IDX = #{idx}
	</sql>
	
	<select id="selectAll-member" resultMap="memberRes" parameterType="memberModel">
		<include refid="select-all-member" />
		 ORDER BY IDX DESC
	</select>
	
	<select id="selectOne" resultMap="memberRes" parameterType="int">
		<include refid="select-all-member" />
		<include refid="where-idx" />
	</select>
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="memberModel">
		INSERT INTO MEMBER(
		idx,
		id,
		nick,
		pass,
		name,
		bloodgroup,
		area,
		email,
		phone,
		num1,
		num2,
		zipcode,
		addr1,
		addr2,
		intro,
		times
		)
		VALUES (
		MEMBER_IDX_SEQ.NEXTVAL,
		#{id},
		#{nick},
		#{pass},
		#{name},
		#{bloodgroup},
		#{area},
		#{email},
		#{phone},
		#{num1},
		#{num2},
		#{zipcode},
		#{addr1},
		#{addr2},
		#{intro},
		sysdate
		)
	</insert>
	
	<!--성별 나이 등록-->
 	<update id="AgeGender" parameterType="memberModel">
			UPDATE MEMBER SET 
			AGE = #{age},
			GENDER = #{gender}
			WHERE ID = #{id}
	</update>
	
	<!-- 아이디 중복 확인 -->
	<select id="getMemberById" resultMap="memberRes" parameterType="string">
		<include refid="select-all-member" />
		WHERE ID = #{id}
	</select>

	
	<!-- 우편번호 찾기 -->
	<select id="zipcodeCheck" parameterType="zipcodeModel" resultMap="zipcodeRes">
			select * from zipcode where AREA3 like '%'||#{area3}||'%'
	</select>
	
	<!-- my_idx가 여자인지 확인 -->
	<select id="myGenderfemale" resultMap="memberRes" parameterType="Integer">
		<include refid="select-all-member" />
		WHERE GENDER = 'female' AND IDX = #{idx}
	</select>
	
	<!-- my_idx가 남자인지 확인 -->
	<select id="myGendermale" resultMap="memberRes" parameterType="Integer">
		<include refid="select-all-member" />
		WHERE GENDER = 'male' AND IDX = #{idx}
	</select>
	
	<!-- my, target 회원정보 가져옴 -->
	<select id="target" resultMap="memberRes" parameterType="Integer">
		<include refid="select-all-member" />
		WHERE IDX = #{idx}
	</select>
	
	<!-- 남자1명 랜덤 -->
	<select id="random_male" resultMap="memberRes" parameterType="memberModel">
		SELECT * FROM (SELECT * FROM MEMBER ORDER BY dbms_random.value) WHERE rownum = 1 AND GENDER = 'male'
	</select>
	<!-- 여자1명 랜덤 -->
	<select id="random_female" resultMap="memberRes" parameterType="memberModel">
		SELECT * FROM (SELECT * FROM MEMBER ORDER BY dbms_random.value) WHERE rownum = 1 AND GENDER = 'female'
	</select>
	
	<!-- 현재 회원수로 가능한 매칭 합 -->
	<select id="all_matching_num" resultMap="matchingRes" parameterType="matchingModel">
		WITH total AS (
			SELECT 
			COUNT(CASE WHEN GENDER = 'female' THEN 1 END) AS female_total , 
			COUNT(CASE WHEN GENDER = 'male' THEN 1 END) AS male_total  
			FROM MEMBER
		)
		SELECT (<![CDATA[ CASE WHEN female_total < male_total THEN female_total ELSE male_total END]]>) AS small FROM total
	</select>

</mapper>